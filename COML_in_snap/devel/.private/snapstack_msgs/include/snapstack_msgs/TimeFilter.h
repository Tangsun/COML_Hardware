// Generated by gencpp from file snapstack_msgs/TimeFilter.msg
// DO NOT EDIT!


#ifndef SNAPSTACK_MSGS_MESSAGE_TIMEFILTER_H
#define SNAPSTACK_MSGS_MESSAGE_TIMEFILTER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace snapstack_msgs
{
template <class ContainerAllocator>
struct TimeFilter_
{
  typedef TimeFilter_<ContainerAllocator> Type;

  TimeFilter_()
    : header()
    , dt(0.0)
    , delayed_dt(0.0)
    , skipped(false)
    , upper(0.0)
    , lower(0.0)  {
    }
  TimeFilter_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , dt(0.0)
    , delayed_dt(0.0)
    , skipped(false)
    , upper(0.0)
    , lower(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _dt_type;
  _dt_type dt;

   typedef float _delayed_dt_type;
  _delayed_dt_type delayed_dt;

   typedef uint8_t _skipped_type;
  _skipped_type skipped;

   typedef float _upper_type;
  _upper_type upper;

   typedef float _lower_type;
  _lower_type lower;





  typedef boost::shared_ptr< ::snapstack_msgs::TimeFilter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snapstack_msgs::TimeFilter_<ContainerAllocator> const> ConstPtr;

}; // struct TimeFilter_

typedef ::snapstack_msgs::TimeFilter_<std::allocator<void> > TimeFilter;

typedef boost::shared_ptr< ::snapstack_msgs::TimeFilter > TimeFilterPtr;
typedef boost::shared_ptr< ::snapstack_msgs::TimeFilter const> TimeFilterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::snapstack_msgs::TimeFilter_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::snapstack_msgs::TimeFilter_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::snapstack_msgs::TimeFilter_<ContainerAllocator1> & lhs, const ::snapstack_msgs::TimeFilter_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.dt == rhs.dt &&
    lhs.delayed_dt == rhs.delayed_dt &&
    lhs.skipped == rhs.skipped &&
    lhs.upper == rhs.upper &&
    lhs.lower == rhs.lower;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::snapstack_msgs::TimeFilter_<ContainerAllocator1> & lhs, const ::snapstack_msgs::TimeFilter_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace snapstack_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::snapstack_msgs::TimeFilter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snapstack_msgs::TimeFilter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snapstack_msgs::TimeFilter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snapstack_msgs::TimeFilter_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snapstack_msgs::TimeFilter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snapstack_msgs::TimeFilter_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::snapstack_msgs::TimeFilter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac265f085f2218e2759385a5695df9af";
  }

  static const char* value(const ::snapstack_msgs::TimeFilter_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac265f085f2218e2ULL;
  static const uint64_t static_value2 = 0x759385a5695df9afULL;
};

template<class ContainerAllocator>
struct DataType< ::snapstack_msgs::TimeFilter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "snapstack_msgs/TimeFilter";
  }

  static const char* value(const ::snapstack_msgs::TimeFilter_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::snapstack_msgs::TimeFilter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# TimeFilter.msg\n"
"\n"
"Header header\n"
"float32 dt  	# dt recorded in time stamp\n"
"float32 delayed_dt  # dt stamped when arrived onboard\n"
"bool skipped	# is msg skipped?\n"
"float32 upper 	# upper bound\n"
"float32 lower 	# lower bound\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::snapstack_msgs::TimeFilter_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::snapstack_msgs::TimeFilter_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.dt);
      stream.next(m.delayed_dt);
      stream.next(m.skipped);
      stream.next(m.upper);
      stream.next(m.lower);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimeFilter_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snapstack_msgs::TimeFilter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::snapstack_msgs::TimeFilter_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "dt: ";
    Printer<float>::stream(s, indent + "  ", v.dt);
    s << indent << "delayed_dt: ";
    Printer<float>::stream(s, indent + "  ", v.delayed_dt);
    s << indent << "skipped: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.skipped);
    s << indent << "upper: ";
    Printer<float>::stream(s, indent + "  ", v.upper);
    s << indent << "lower: ";
    Printer<float>::stream(s, indent + "  ", v.lower);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SNAPSTACK_MSGS_MESSAGE_TIMEFILTER_H
