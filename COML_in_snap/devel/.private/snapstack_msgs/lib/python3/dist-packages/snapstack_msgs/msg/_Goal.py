# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from snapstack_msgs/Goal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Goal(genpy.Message):
  _md5sum = "b0f60475b1346f247f102ae07228cff4"
  _type = "snapstack_msgs/Goal"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Use this message to command the outer loop to track
# a trajectory generated from a high-level trajectory planner.

Header header

# Current time-slice of desired trajectory
geometry_msgs/Point p # position
geometry_msgs/Vector3 v # velocity
geometry_msgs/Vector3 a # acceleration
geometry_msgs/Vector3 j # jerk

float64 psi # angle as defined in Sec. III of https://arxiv.org/pdf/2103.06372.pdf  
# In general, it is will not be the rXYZ yaw Euler angle of the UAV (unless the drone is in a hover condition).
# This is due to the fact that q_psi (see link above) already has some rXYZ yaw on it.
# See also the paper https://link.springer.com/chapter/10.1007/978-3-030-28619-4_20
float64 dpsi #d{psi}/dt

bool power # true if motors should be able to spin

# Trajectory tracking mode constants
uint8 MODE_POSITION_CONTROL     = 0
uint8 MODE_VELOCITY_CONTROL     = 1
uint8 MODE_ACCELERATION_CONTROL = 2

# Trajectory tracking mode for x/y and z components.
# The default is POSITION control, which uses position and velocity error
# to calculate the control effort. VELOCITY control only uses vel error.
# ACCELERATION mode does not use tracking error and could be used to provide
# a control signal computed from something other than the default PID cntrl.
uint8 mode_xy
uint8 mode_z

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  MODE_POSITION_CONTROL = 0
  MODE_VELOCITY_CONTROL = 1
  MODE_ACCELERATION_CONTROL = 2

  __slots__ = ['header','p','v','a','j','psi','dpsi','power','mode_xy','mode_z']
  _slot_types = ['std_msgs/Header','geometry_msgs/Point','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','float64','bool','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,p,v,a,j,psi,dpsi,power,mode_xy,mode_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Goal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.p is None:
        self.p = geometry_msgs.msg.Point()
      if self.v is None:
        self.v = geometry_msgs.msg.Vector3()
      if self.a is None:
        self.a = geometry_msgs.msg.Vector3()
      if self.j is None:
        self.j = geometry_msgs.msg.Vector3()
      if self.psi is None:
        self.psi = 0.
      if self.dpsi is None:
        self.dpsi = 0.
      if self.power is None:
        self.power = False
      if self.mode_xy is None:
        self.mode_xy = 0
      if self.mode_z is None:
        self.mode_z = 0
    else:
      self.header = std_msgs.msg.Header()
      self.p = geometry_msgs.msg.Point()
      self.v = geometry_msgs.msg.Vector3()
      self.a = geometry_msgs.msg.Vector3()
      self.j = geometry_msgs.msg.Vector3()
      self.psi = 0.
      self.dpsi = 0.
      self.power = False
      self.mode_xy = 0
      self.mode_z = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d3B().pack(_x.p.x, _x.p.y, _x.p.z, _x.v.x, _x.v.y, _x.v.z, _x.a.x, _x.a.y, _x.a.z, _x.j.x, _x.j.y, _x.j.z, _x.psi, _x.dpsi, _x.power, _x.mode_xy, _x.mode_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.p is None:
        self.p = geometry_msgs.msg.Point()
      if self.v is None:
        self.v = geometry_msgs.msg.Vector3()
      if self.a is None:
        self.a = geometry_msgs.msg.Vector3()
      if self.j is None:
        self.j = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 115
      (_x.p.x, _x.p.y, _x.p.z, _x.v.x, _x.v.y, _x.v.z, _x.a.x, _x.a.y, _x.a.z, _x.j.x, _x.j.y, _x.j.z, _x.psi, _x.dpsi, _x.power, _x.mode_xy, _x.mode_z,) = _get_struct_14d3B().unpack(str[start:end])
      self.power = bool(self.power)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d3B().pack(_x.p.x, _x.p.y, _x.p.z, _x.v.x, _x.v.y, _x.v.z, _x.a.x, _x.a.y, _x.a.z, _x.j.x, _x.j.y, _x.j.z, _x.psi, _x.dpsi, _x.power, _x.mode_xy, _x.mode_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.p is None:
        self.p = geometry_msgs.msg.Point()
      if self.v is None:
        self.v = geometry_msgs.msg.Vector3()
      if self.a is None:
        self.a = geometry_msgs.msg.Vector3()
      if self.j is None:
        self.j = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 115
      (_x.p.x, _x.p.y, _x.p.z, _x.v.x, _x.v.y, _x.v.z, _x.a.x, _x.a.y, _x.a.z, _x.j.x, _x.j.y, _x.j.z, _x.psi, _x.dpsi, _x.power, _x.mode_xy, _x.mode_z,) = _get_struct_14d3B().unpack(str[start:end])
      self.power = bool(self.power)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14d3B = None
def _get_struct_14d3B():
    global _struct_14d3B
    if _struct_14d3B is None:
        _struct_14d3B = struct.Struct("<14d3B")
    return _struct_14d3B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
